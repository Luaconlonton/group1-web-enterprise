<html lang="en">
<script src="https://d3js.org/d3.v7.min.js"></script>
{{> head}}

<body class="sb-nav-fixed">
    {{> qamHeader}}
    <div id="container" style="width: 70%; height: 80%; margin: 4% 15%; padding: 0;">

        <br>
        <div id="chart" style="padding: 20px"></div>
        <br>
        <div id="chart2" style="padding: 20px"></div>
        <br>
    </div>
</body>

<script type="text/javascript">
    let data= []
    data = {{{ data }}}
    anychart.onDocumentReady(function () {
        // set the data
        let data = [];
        data = {{{ data }}}
    console.log(data)
    // create the chart
    var chart = anychart.pie();
    // set the chart title
    chart.title("Dashboard number of People");
    // add the data
    chart.data(data);
    // set legend position
    chart.legend().position("right");
    // set items layout
    chart.legend().itemsLayout("vertical");
    // display the chart in the container
    chart.container('container');
    chart.draw();
    });
    // Set the dimensions of the chart
const width = 500;
const height = 300;

// Set the margins of the chart
const margin = {top: 20, right: 20, bottom: 30, left: 50};

// Set the range and domain of the x-axis
const x = d3.scaleBand()
    .range([margin.left, width - margin.right])
    .domain(data.map(d => d.x))
    .padding(0.1);

// Set the range and domain of the y-axis
const y = d3.scaleLinear()
    .range([height - margin.bottom, margin.top])
    .domain([0, d3.max(data, d => d.value)]);

// Create the SVG element and set its dimensions
const svg = d3.select("#chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

// Create the x-axis
svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x))
    .selectAll("text")
    .attr("transform", "rotate(-45)")
    .attr("text-anchor", "end")
    .attr("dx", "-.8em")
    .attr("dy", ".15em");

// Create the y-axis
svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y));
    
// Create the bars
svg.selectAll("rect")
    .data(data)
    .join("rect")
    .attr("x", d => x(d.x))
    .attr("y", d => y(d.value))
    .attr("width", x.bandwidth())
    .attr("height", d => height - margin.bottom - y(d.value))
    .attr("fill", (d, i) => ['#64b5f6', '#1976d2', '#ef6c00'][i]);

    // Kích thước của SVG và biểu đồ
const chartWidth = width - margin.left - margin.right;
const chartHeight = height - margin.top - margin.bottom;

    function lineChart() {
        // Tạo SVG và chèn nó vào HTML
const svg = d3.select('#chart2')
    .append('svg')
    .attr('width', width)
    .attr('height', height);

// Tạo nhóm (group) để chứa biểu đồ
const chartGroup = svg.append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

// Xác định phạm vi của trục x và y
const xScale = d3.scaleBand()
    .range([0, chartWidth])
    .domain(data.map(d => d.x))
    .padding(0.1);
const yScale = d3.scaleLinear()
    .range([chartHeight, 0])
    .domain([0, d3.max(data, d => d.value)]);

// Vẽ trục x và y
const xAxis = d3.axisBottom(xScale);
const yAxis = d3.axisLeft(yScale);
chartGroup.append('g')
    .attr('transform', `translate(0,${chartHeight})`)
    .call(xAxis);
chartGroup.append('g')
    .call(yAxis);

// Vẽ đường cho dữ liệu
const line = d3.line()
    .x(d => xScale(d.x) + xScale.bandwidth() / 2)
    .y(d => yScale(d.value));
chartGroup.append('path')
    .datum(data)
    .attr('fill', 'none')
    .attr('stroke', 'steelblue')
    .attr('stroke-width', 2)
    .attr('d', line);
    }
    lineChart()
</script>
</script>

</html>